import streamlit as st
import pandas as pd
import subprocess
import os
import uuid

import streamlit as st
from ultralytics import YOLO
from PIL import Image
from datetime import datetime
import numpy as np

st.set_page_config(
    page_title="Seasonal Analysis",
    layout="wide"
)

custom_css = """
<style>
/* ·∫®n menu v√† footer m·∫∑c ƒë·ªãnh c·ªßa Streamlit (n·∫øu mu·ªën) */
#MainMenu {visibility: hidden;}
footer {visibility: hidden;}

/* T√πy ch·ªânh chung */
body {
    background-color: #F7F7F7;
    font-family: 'sans-serif';
}

/* T√πy ch·ªânh ti√™u ƒë·ªÅ */
h1, h2, h3, h4 {
    color: #333333;
}

/* N√∫t n·ªïi (Floating Action Button) ·ªü g√≥c ph·∫£i d∆∞·ªõi */
.float-button {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background-color: #4E7B70;
    color: white;
    border-radius: 50%;
    width: 100px;
    height: 100px;
    border: none;
    text-align: center;
    cursor: pointer;
    font-size: 1rem;
    box-shadow: 2px 2px 5px rgba(0,0,0,0.3);
}
.float-button span {
    display: inline-block;
    margin-top: 35px; /* canh text ·ªü gi·ªØa n√∫t */
    font-size: 1rem;
    font-weight: bold;
}
.float-button:hover {
    background-color: #3D6157;
}

/* T√πy ch·ªânh c·ªôt ph·∫£i: Notified Blog */
.notified-blog {
    background-color: #FFFFFF;
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0 0 5px rgba(0,0,0,0.1);
}
.notified-blog h3 {
    margin-top: 0;
}
</style>
"""
st.markdown(custom_css, unsafe_allow_html=True)

# === T·∫°o file log n·∫øu ch∆∞a c√≥ ho·∫∑c file r·ªóng ===
log_file = "logs/detect_log.csv"
os.makedirs("logs", exist_ok=True)

# N·∫øu file kh√¥ng t·ªìn t·∫°i ho·∫∑c r·ªóng -> t·∫°o header
if not os.path.exists(log_file) or os.path.getsize(log_file) == 0:
    pd.DataFrame(columns=["datetime", "image_path", "result_path"]).to_csv(log_file, index=False)


col1, col2 = st.columns([3, 1], gap="large")

def predict_model(source_path: str):
    print("Starting prediction...")
    # ƒê·∫∑t t√™n th∆∞ m·ª•c output ri√™ng bi·ªát n·∫øu mu·ªën (tr√°nh ƒë√®)
    output_dir = f"detect/predict_{uuid.uuid4().hex[:6]}"

    predict_command = f'yolo detect predict model=models/best.pt source="{source_path}" project=detect name={output_dir} exist_ok=True'

    subprocess.run(predict_command, shell=True)

    # D·ª± ƒëo√°n xong th√¨ ·∫£nh output n·∫±m trong: runs/detect/predict_xxxx/{t√™n_·∫£nh}
    filename = os.path.basename(source_path)
    output_img_path = os.path.join("detect", output_dir, filename)
    return output_img_path

with col1:
    # st.markdown("### Seasonal Analysis")

   
    # image_dir = "images"
    # image_files = [f for f in os.listdir(image_dir) if f.endswith(('.png', '.jpg', '.jpeg'))]


    # image_cols = st.columns(5)


    # for idx, img_name in enumerate(image_files):
    #     img_path = os.path.join(image_dir, img_name)  
    #     with image_cols[idx % 5]:  
    #         st.image(img_path)


    # data = {
    #     "Ng√†y": ["1/2/2025", "2/2/2025", "3/2/2025", "4/2/2025", "5/2/2025"],
    #     "S·∫£n l∆∞·ª£ng (Kg)": [120, 130, 115, 140, 160],
    #     "Ch·∫•t l∆∞·ª£ng (%)": [85, 80, 88, 82, 90],
    #     "ƒê·ªô ·∫©m ƒë·∫•t (%)": [60, 62, 58, 65, 70],
    #     "Nhi·ªát ƒë·ªô (¬∞C)": [25, 26, 24, 27, 28],
    #     "S·ªë c√¢y b·ªã b·ªánh": [2, 3, 1, 4, 0],
    #     "Ghi ch√∫": ["B√¨nh th∆∞·ªùng", "ƒê·ªôt bi·∫øn", "B√¨nh th∆∞·ªùng", "ƒê·ªôt bi·∫øn", "B√¨nh th∆∞·ªùng"]
    # }
    # df = pd.DataFrame(data)

    # st.data_editor(df, num_rows="dynamic")  

    st.title("Ph√°t hi·ªán b·ªánh v·ªõi YOLOv8")


    # with st.expander("üìú L·ªãch s·ª≠ ph√°t hi·ªán b·ªánh"):
    #     log_df = pd.read_csv(log_file)
    #     if not log_df.empty:
    #         for i, row in log_df[::-1].head(5).iterrows():  # 5 log g·∫ßn nh·∫•t
    #             st.markdown(f"**üïí {row['datetime']}**")
    #             cols = st.columns([1, 1])
    #             with cols[0]:
    #                 st.image(row["image_path"], caption="·∫¢nh g·ªëc", use_container_width=True)
    #             with cols[1]:
    #                 st.image(row["result_path"], caption="K·∫øt qu·∫£", use_container_width=True)
    #             st.markdown("---")
    #     else:
    #         st.info("Ch∆∞a c√≥ log n√†o ƒë∆∞·ª£c ghi nh·∫≠n.")
    with st.expander("üìú L·ªãch s·ª≠ ph√°t hi·ªán b·ªánh"):
        log_df = pd.read_csv(log_file)
        if not log_df.empty:
            for i, row in log_df[::-1].head(8).iterrows():  # hi·ªÉn th·ªã 8 log g·∫ßn nh·∫•t
                st.markdown(f"**üïí {row['datetime']}**")
                cols = st.columns([1, 1])
                with cols[0]:
                    st.image(row["image_path"], caption="·∫¢nh g·ªëc", width=200)
                with cols[1]:
                    st.image(row["result_path"], caption="K·∫øt qu·∫£", width=200)
                st.markdown("---")
        else:
            st.info("Ch∆∞a c√≥ log n√†o ƒë∆∞·ª£c ghi nh·∫≠n.")


    uploaded_file = st.file_uploader("Ch·ªçn m·ªôt ·∫£nh (jpg, png)", type=["jpg", "png"])
    if uploaded_file is not None:

        temp_dir = "temp_uploads"
        os.makedirs(temp_dir, exist_ok=True)

        temp_img_path = os.path.join(temp_dir, uploaded_file.name)
        with open(temp_img_path, "wb") as f:
            f.write(uploaded_file.getbuffer())

        st.image(temp_img_path, caption="·∫¢nh ƒë√£ t·∫£i l√™n", use_container_width=True)

        # D·ª± ƒëo√°n b·∫±ng CLI
        output_img_path = predict_model(temp_img_path)

        if os.path.exists(output_img_path):
            st.image(output_img_path, caption="·∫¢nh k·∫øt qu·∫£ YOLO", use_container_width=True)
            # Ghi log
            log_df = pd.read_csv(log_file)
            log_df.loc[len(log_df)] = {
                "datetime": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "image_path": temp_img_path,
                "result_path": output_img_path
            }
            log_df.to_csv(log_file, index=False)
        else:
            st.warning("Kh√¥ng t√¨m th·∫•y ·∫£nh k·∫øt qu·∫£. Vui l√≤ng ki·ªÉm tra model ho·∫∑c ·∫£nh input.")


    

with col2:
    st.markdown("### Notified Blog")
    
    bullet_points = [
        "Detect yellow leaves at cam0",
        "Detect leaves are rotten at cam1",
        "Detect ripe tomatoes at cam2",
        "Detect ripe tomatoes at cam3",
        "Detect yellow leaves at cam7",
        "Detect yellow leaves at cam8"
    ]
    for idx, point in enumerate(bullet_points, start=1):
        st.markdown(f"{idx}. {point}")
    
    st.markdown("</div>", unsafe_allow_html=True)
    
    with st.container():
        _, col2 = st.columns([3, 1.5])
        with col2:
            if st.button("Dashboard", key="btn_cp"):
                st.switch_page("./main.py")


